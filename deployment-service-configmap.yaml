apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  PORT: "3000"
  PORT2: "3001"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-app
  labels:
    app: node-app
spec:
  replicas: 2 # Ensures high availability
  selector:
    matchLabels:
      app: node-app
  template:
    metadata:
      labels:
        app: node-app
    spec:
      containers:
      - name: my-node-app
        image: node:18-alpine #Node.js base image
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: app-config
        command: ["node", "-e"]
        args: ["const http=require('http');const port=process.env.PORT;http.createServer((req,res)=>{res.end('Hello Nitu!\\nThis is demo for Day 3 Assignment\\n');}).listen(port);"]
      - name: my-node-app
        image: node:18-alpine
        ports:
        - containerPort: 3001
        envFrom:
        - configMapRef:
            name: app-config
        command: ["node", "-e"]
        args: ["const http=require('http');const port=process.env.PORT2;http.createServer((req,res)=>{res.end('Hello again Nitu from Node!\\nThis is demo for Day 3 Assignment for Containerization and Orchestration\\n');}).listen(port);"]
---
apiVersion: v1
kind: Service
metadata:
  name: node-app-service
  labels:
    app: node-app
spec:
  selector:
    app: node-app
  ports:
  - name: http-server1 # Unique name for the first port
    protocol: TCP
    port: 3000 # ClusterIP port
    targetPort: 3000 # Container port for server1
  - name: http-server2 # Unique name for the second port
    protocol: TCP
    port: 3001 # ClusterIP port
    targetPort: 3001 # Container port for server2
